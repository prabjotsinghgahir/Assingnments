AWSTemplateFormatVersion: 2010-09-09
Parameters:
  S3BucketName:
    Type: String
    Default: innfy-pr-h
  S3DestinationBucket:
    Type: String
    Default: dest-bucket-psg
  LambdaCodeBucket:
    Type: String
    Default: codebucket-infy-lam
  LambdaKey:
    Type: String
    Default: lambda-zip.zip
  LambdaHandler:
    Type: String
    Default: lambda-zip.handler
Resources:
  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt LambdaFunction.Arn
    DependsOn:
      - LambdaPermission
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        'Fn::GetAtt':
          - LambdaFunction
          - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: 'AWS::AccountId'
      SourceArn:
        'Fn::Sub': 'arn:aws:s3:::${S3BucketName}'
    DependsOn:
      - LambdaFunction
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role:
        'Fn::GetAtt':
          - IAM
          - Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaKey
      Environment:
        Variables:
          takebucket: !Ref S3DestinationBucket
      Runtime: python3.8
      Handler: !Ref LambdaHandler
  IAM:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
  DestinationBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
        BucketName: !Ref S3DestinationBucket
